use mips_parser::prelude::*;

use crate::{state::ICState, ICResult};

mod functions;
use functions::*;

pub fn exec_expr(state: &mut ICState, expr: &Expr) -> ICResult<()> {
    use Func::*;

    let func = &expr.0;
    let args = &expr.1;

    #[rustfmt::skip]
    match func {
        Bdns   => {},
        Bdnsal => {},
        Bdse   => {},
        Bdseal => {},
        Brdns  => {},
        Brdse  => {},
        L      => {},
        Lb     => {},
        Lr     => {},
        Ls     => {},
        S      => {},
        Sb     => {},
        Bap    => {},
        Bapal  => {},
        Bapz   => {},
        Bapzal => {},
        Beq    => {},
        Beqal  => {},
        Beqz   => {},
        Beqzal => {},
        Bge    => {},
        Bgeal  => {},
        Bgez   => {},
        Bgezal => {},
        Bgt    => {},
        Bgtal  => {},
        Bgtz   => {},
        Bgtzal => {},
        Ble    => {},
        Bleal  => {},
        Blez   => {},
        Blezal => {},
        Blt    => {},
        Bltal  => {},
        Bltz   => {},
        Bltzal => {},
        Bna    => {},
        Bnaal  => {},
        Bnaz   => {},
        Bnazal => {},
        Bne    => {},
        Bneal  => {},
        Bnez   => {},
        Bnezal => {},
        Brap   => {},
        Brapz  => {},
        Breq   => {},
        Breqz  => {},
        Brge   => {},
        Brgez  => {},
        Brgt   => {},
        Brgtz  => {},
        Brle   => {},
        Brlez  => {},
        Brlt   => {},
        Brltz  => {},
        Brna   => {},
        Brnaz  => {},
        Brne   => {},
        Brnez  => {},
        J      => {},
        Jal    => {},
        Jr     => {},
        Sap    => {},
        Sapz   => {},
        Sdns   => {},
        Sdse   => {},
        Select => {},
        Seq    => {},
        Seqz   => {},
        Sge    => {},
        Sgez   => {},
        Sgt    => {},
        Sgtz   => {},
        Sle    => {},
        Slez   => {},
        Slt    => {},
        Sltz   => {},
        Sna    => {},
        Snaz   => {},
        Sne    => {},
        Snez   => {},
        Abs    => {},
        Acos   => {},
        Add    => {},
        Asin   => {},
        Atan   => {},
        Ceil   => {},
        Cos    => {},
        Div    => {},
        Exp    => {},
        Floor  => {},
        Log    => {},
        Max    => {},
        Min    => {},
        Mod    => {},
        Mul    => {},
        Rand   => {},
        Round  => {},
        Sin    => {},
        Sqrt   => {},
        Sub    => {},
        Tan    => {},
        Trunc  => {},
        And    => f_and(args, state)?,
        Nor    => f_nor(args, state)?,
        Or     => f_or(args, state)?,
        Xor    => f_xor(args, state)?,
        Peek   => {},
        Pop    => {},
        Push   => {},
        Alias  => f_alias(args, state)?,
        Define => {},
        Hcf    => {},
        Move   => f_move(args, state)?,
        Sleep  => {},
        Yield  => {},
        Label  => {},
    };

    Ok(())
}

