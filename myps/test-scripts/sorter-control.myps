sorter          = d0
requestDownLMem = d1
requestDownRMem = d2
requestUpMem    = d3

fix wordA = 0 # Bitwise-or word A
fix wordB = 0 # Bitwise-or word B
fix wordOr = 0 # Bitwise-or output

loop:
    if sorter(0).Occupied:
        hash = sorter(0).OccupantHash
        # TODO: hash sorting
        output = (hash == 123)
        sorter.Output = output
    wordA = requestDownLMem.Setting
    wordB = requestDownRMem.Setting
    if (wordA > 0) or (wordB > 0): # send downward request up
        fix i = 0 # Bitwise or words A and B
        while (wordA > 0) or (wordB > 0): # while words non-zero
            bitA, wordA = wordA % 2, trunc(wordA / 2) # get word A bit and shift
            bitB, worbB = wordB % 2, trunc(wordB / 2) # get word B bit and shift
            wordOr += (bitA or bitB) * i # add or'd bit
            i *= 2 # "increment" bit position
