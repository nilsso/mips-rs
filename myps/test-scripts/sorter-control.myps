sorter          = d0
requestDownLMem = d1 # Downward request handler (sorter IC housing)
requestDownRMem = d2 # This sorter's fabricator controller (IC housing)
requestUpMem    = d3 # Upward request handler (IC housing)

loop: # main loop
    fix wordDownL = requestDownLMem.Setting
    fix wordDownR = requestDownRMem.Setting
    hash = sorter(0).OccupantHash
    if hash > 0:
        # TODO: get bit position from occupant hash, get bit from right request, set output
        x = 0
        push(123)
        x = peek()
        x = pop()
    # Send downward requests up:
    fix wordOr = 0
    # Bit-or the down-left and down-right request words
    if (wordDownL > 0) or (wordDownR > 0):
        fix i = 0 # Bitwise or words A and B
        while (wordDownL > 0) or (wordDownR > 0): # While words non-zero
            fix bitL, wordDownL = wordDownL % 2, trunc(wordDownL / 2) # Get word A bit and shift
            fix bitR, worbDownR = wordDownR % 2, trunc(wordDownR / 2) # Get word B bit and shift
            wordOr += (bitL or bitR) * i # Add or'd bit
            i *= 2 # "Increment" bit position
    requestUpMem.Setting = wordOr
    yield()
