
/* ============================================================================================== */
/* Base (atomic) values */
/* ============================================================================================== */

/* An integer literal */
int_lit = @{ ("+" | "-")? ~ ASCII_DIGIT+ }

/* A float literal */
num_lit = @{ int_part ~ ("." ~ dec_part)? ~ ((^"e" | ^"E") ~ exp_part)? }
    int_part = _{ int_lit }
    dec_part = _{ int_lit }
    exp_part = _{ int_lit }

/* A token string */
token = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

/* A variable/function name (protects literal device labels as keywords) */
var = @{ dev_base? ~ token }

/* Integers or floats */
int = { int_lit | var }
num = { num_lit | var }

/* A device register (batched or literal, but not a variable) */
dev = _{ dev_lit | var }
    dev_lit = { dev_self | dev_net | dev_base }
        dev_self = @{ "db" }
        dev_base = ${ "d" ~ (int_lit | ("(" ~ expr ~ ")")) }
        dev_net  = ${ int ~ ".all" }

/* ============================================================================================== */
/* L-values and R-values */
/* ============================================================================================== */

/* A device parameter */
param = @{ token }


/* An l-value
 *
 * An l-value is something which persists beyond an expression; that is, an l-value is a location at
 * which we can store a number. An l-value can be a variable or the parameter of a device (or many
 * devices in the case of the network).
 */
lv = { var_fix | var | lv_param }
    var_fix = { "fix" ~ var }
    /* A device parameter to write to */
    lv_param = ${ dev ~ "." ~ param }


/* An r-value
 *
 * An r-value is something which does *not* persist beyond an expression, and ultimately is to be
 * reduced to a number. An r-value can be a literal number, a value copied from a variable, a value
 * read from a device parameter, or an expression of any of the previous.
 */
rv = { dev_lit | num_lit | rv_param | rv_func | "(" ~ expr ~ ")" | var }
    rv_param = _{ rv_net_param | rv_dev_param | rv_dev_slot }
        rv_net_param = ${ int ~ "." ~ batch_mode ~ "." ~ param }
        rv_dev_param = ${ dev ~ "." ~ param }
        rv_dev_slot  = ${ dev ~ "(" ~ int ~ ")." ~ param }


/* Modes for batch reading a parameter from devices on the network to an r-value */
batch_mode = _{ batch_avg | batch_sum | batch_min | batch_max }
    /* Batch read modes */
    batch_avg  = { "avg" }
    batch_sum  = { "sum" }
    batch_min  = { "min" }
    batch_max  = { "max" }


/* Built-in functions which return an r-value */
rv_func = _{ rv_func_nullary | rv_func_unary | rv_func_binary }
    rv_func_nullary = { (f_peek | f_pop) ~ "(" ~ ")" }
        f_peek = { "peek" }
        f_pop  = { "pop" }
    rv_func_unary = {
        (
            f_abs   | f_acos | f_asin | f_atan  | f_ceil | f_cos  | f_exp |
            f_floor | f_ln   | f_rand | f_round | f_sin  | f_sqrt | f_tan | f_trunc
        ) ~ "(" ~ rv ~ ")"
    }
        f_abs   = { "abs" }
        f_acos  = { "acos" }
        f_asin  = { "asin" }
        f_atan  = { "atan" }
        f_ceil  = { "ceil" }
        f_cos   = { "cos" }
        f_exp   = { "exp" }
        f_floor = { "floor" }
        f_ln    = { "ln" }
        f_rand  = { "rand" }
        f_round = { "round" }
        f_sin   = { "sin" }
        f_sqrt  = { "sqrt" }
        f_tan   = { "tan" }
        f_trunc = { "trunc" }
    rv_func_binary = {
        (
            f_max | f_min
        ) ~ "(" ~ rv ~ "," ~ rv ~ ")"
    }
        f_max   = { "max" }
        f_min   = { "min" }

/* ============================================================================================== */
/* Expressions */
/* ============================================================================================== */

/* An expression */
expr = { expr_ternary | expr_binary | expr_unary | rv }
    expr_unary   = { op_u ~ rv }
    expr_binary  = { rv ~ (op_b ~ rv)+ }
    expr_ternary = { rv ~ "?" ~ rv ~ ":" ~ rv }

/* Operators */
op_u   = _{ op_inv | op_neg }
    op_inv = { "-" }
    op_neg = { "!" }
op_b   = _{
    op_add | op_sub | op_mul | op_div | op_rem |
    op_and | op_or  | op_xor |
    op_eq  | op_ge  | op_gt  | op_le  | op_lt  | op_ne 
}
    /* Numerical */
    op_add = { "+" }
    op_sub = { "-" }
    op_mul = { "*" }
    op_div = { "/" }
    op_rem = { "%" }
    /* Logical */
    op_and = { "and" }
    op_or  = { "or" }
    op_xor = { "xor" }
    /* Relational */
    op_eq = { "==" }
    op_ge = { ">=" }
    op_gt = { ">" }
    op_le = { "<=" }
    op_lt = { "<" }
    op_ne = { "!=" }
op_asn = _{ "+=" | "-=" | "*=" | "/=" | "%=" }

/* ============================================================================================== */
/* Program and statements */
/* ============================================================================================== */

/* A statement */
stmt = { stmt_assign_self | stmt_assign_value | stmt_func }
    stmt_assign_value =  { (lv ~ ",")* ~ lv ~ "=" ~ (expr ~ ",")* ~ expr }
    stmt_assign_self  =  { lv ~ op_asn ~ expr }
    stmt_func         = _{ stmt_func_nullary | stmt_func_unary }
        stmt_func_nullary = { (f_hcf | f_yield) ~ "(" ~ ")" }
            f_hcf   = { "hcf" }
            f_yield = { "yield" }
        stmt_func_unary = { ("push" | "sleep") ~ "(" ~ rv ~ ")" }

/* A branch */
branch = { ( b_loop | b_if | b_elif | b_else | b_while | b_for  | b_def ) ~ ":" }
    b_loop  = { "loop" }
    b_if    = { "if" ~ expr }
    b_elif  = { "elif" ~ expr }
    b_else  = { "else" }
    b_while = { "while" ~ expr }
    b_for   = { "for" ~ var ~ "in" ~ "(" ~ expr ~ ":" ~ expr ~ (":" ~ expr)? ~ ")" }
    b_def   = { "def" ~ var }

line = ${ empty | (indent* ~ item ~ WHITESPACE* ~ comment? ~ NEWLINE) }
    empty = { WHITESPACE* ~ WHITESPACE* ~ COMMENT* ~ NEWLINE }
    indent = { "    " }
    item = !{ branch | stmt } /* NOTE: Non-atomic starts here */

program = ${
    SOI ~
    line* ~
    EOI
}

comment = @{ COMMENT+ }
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }
WHITESPACE = _{ " " }
